CREATE TEMPORARY TABLE {{ as_attribute_table(renderer.attribute) }} (
    sku VARCHAR(128) NOT NULL,
    entity_id INTEGER NOT NULL,
    type_id VARCHAR(32) NOT NULL,
    {%- for field in renderer.fields -%}
    `{{ as_field_column(field) }}` TEXT NULL,
    `{{ as_field_column(field) }}__short` TEXT NULL,
    {% endfor -%}
    PRIMARY KEY (sku),
    UNIQUE INDEX (entity_id)
) CHARACTER SET=utf8mb4 COLLATE=utf8mb4_unicode_ci
SELECT
    {% for field in renderer.fields %}
    GROUP_CONCAT({{ as_default_alias() }}_option.code) AS `{{ as_field_column(field) }}`,
    GROUP_CONCAT({{ as_default_alias() }}_option.short_code) AS `{{ as_field_column(field) }}__short`,
    {% endfor -%}
    product.*
FROM tmp_sku AS product
INNER JOIN eav_attribute AS attribute
    ON attribute.attribute_code='{{ renderer.attribute.code }}' AND attribute.entity_type_id=4
INNER JOIN catalog_product_entity_varchar AS {{ as_default_alias() }}
    ON {{ as_default_alias() }}.entity_id=product.entity_id
    AND {{ as_default_alias() }}.attribute_id=attribute.attribute_id
    AND {{ as_default_alias() }}.store_id=0
LEFT JOIN (
    SELECT *
    FROM tmp_options
    WHERE attribute LIKE '{{ renderer.attribute.code }}'
) AS {{ as_default_alias() }}_option
    ON FIND_IN_SET({{ as_default_alias() }}_option.option_id, {{ as_default_alias() }}.value)
GROUP BY {{ as_default_alias() }}.entity_id,
         product.sku,
         product.entity_id,
         product.type_id
